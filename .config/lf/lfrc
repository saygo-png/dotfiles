set wrapscroll true

# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 1
set period 1
set hidden!
set autoquit true

cmd open ${{
 case $(file --mime-type "$(readlink -f $f)" -b) in
  application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
  image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
  text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
   image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
   image/svg+xml) display -- $f ;;
   image/*) $OPENER $f & ;;
   audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
   video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
   application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
   application/pgp-encrypted) $EDITOR $fx ;;
   application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template|application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint|application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template|application/vnd.oasis.opendocument.formula|application/vnd.oasis.opendocument.database) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
  *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
 esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd extract ${{
clear; tput cup $(($(tput lines)/3)); tput bold
set -f
printf "%s\n\t" "$fx"
printf "extract?[y/N]"
read ans
[ $ans = "y" ] && aunpack $fx
}}

cmd delete ${{
clear; tput cup $(($(tput lines)/3)); tput bold
set -f
printf "%s\n\t" "$fx"
printf "delete?[Y/n]"
read ans
[ -z $ans ] && ans="y"
[ $ans = "y" ] && rmw $fx && notify-send -t 400 "deleted $fx" || :
}}

cmd drag ${{
set -f
printf "%s\n" "$fx"
dragon -x $fx
}}
#cmd moveto ${{
# clear; tput cup $(($(tput lines)/3)); tput bold
# set -f
# clear; echo "Move to where?"
# dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
# for x in $fx; do
#  eval mv -iv \"$x\" \"$dest\"
# done &&
# notify-send "File(s) moved." "File(s) moved to $dest."
#}}

#cmd copyto ${{
# clear; tput cup $(($(tput lines)/3)); tput bold
# set -f
# clear; echo "Copy to where?"
# dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
# for x in $fx; do
#  eval cp -ivr \"$x\" \"$dest\"
# done &&
# notify-send "File(s) copied." "File(s) copies to $dest."
#}}

# Zoxide intergration.
  cmd z %{{
   result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
  }}
cmd zi ${{
 result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
  lf -remote "send $id cd \"$result\""
}}
cmd on-cd &{{
 zoxide add "$PWD"
}}

cmd bulkrename ${{
 tmpfile_old="$(mktemp)"
  tmpfile_new="$(mktemp)"

  [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

  echo "$fs" > "$tmpfile_old"
   echo "$fs" > "$tmpfile_new"
   $EDITOR "$tmpfile_new"

   [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

 paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
  do
   [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

     rm -f "$tmpfile_old" "$tmpfile_new"
     lf -remote "send $id unselect"
}}

# Bindings
map S :cd ~/.local/bin
map t :cd ~/Downloads/torrents
map g top
map D delete
map E extract
map <c-n> push :mkdir<space>
map <c-r> reload
map <enter> shell
map x $$f
map X !$f
map M drag

map A :rename; cmd-end # at the very end
map c push A<c-u> # new rename
map I :rename; cmd-home # at the very beginning
map i :rename # before extension
map a :rename; cmd-right # after extension
map B bulkrename

#map Y $printf "%s" "$fx" | xclip -selection clipboard

set wrapscroll true

# Basic variables.
set shellopts '-eu'
set ifs "\n"
set scrolloff 1
set period 1
set hidden!
set autoquit true

cmd open ${{
 case $(file --mime-type "$(readlink -f $f)" -b) in
  application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
  image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
  text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
   image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
   image/svg+xml) imv-x11 $f & ;;
   image/*) $OPENER $f & ;;
   audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
   video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
   application/pdf|application/vnd.djvu|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
   application/pgp-encrypted) $EDITOR $fx ;;
   application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template|application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint|application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template|application/vnd.oasis.opendocument.formula|application/vnd.oasis.opendocument.database) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
  *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
 esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd extract ${{
clear; tput cup $(($(tput lines)/3)); tput bold
set -f
printf "%s\n\t" "$fx"
printf "extract?[y/N]"
read ans
[ $ans = "y" ] && aunpack $fx
}}

cmd delete ${{
clear; tput cup $(($(tput lines)/3)); tput bold
set -f
printf "%s\n\t" "$fx"
printf "delete?[Y/n]"
read ans
[ -z $ans ] && ans="y"
[ $ans = "y" ] && rmw $fx && notify-send -t 400 "deleted $fx" || :
}}

cmd drag ${{
set -f
printf "%s\n" "$fx"
dragon -x $fx
}}


# Zoxide intergration.
  cmd z %{{
   result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
  }}
cmd zi ${{
 result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
  lf -remote "send $id cd \"$result\""
}}
cmd on-cd &{{
 zoxide add "$PWD"
}}

cmd bulkrename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd exitexit ${{
  sleep 1
  lf -remote "send quit"
}}
# Fuzzy find.
cmd fzf_jump ${{
   res="$(find $HOME/ -maxdepth 6 | fzf --preview='ls --color=always {}' --hscroll-off=30 --preview-window=:sharp)"
   if [ -f "$res" ]; then
     cmd="select"
   elif [ -d "$res" ]; then
     cmd="cd"
   fi
lf -remote "send $id $cmd \"$res\""A
}}

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

map f :fzf_jump

# Bindings.
map p paste
map S :cd ~/.local/bin
map t :cd ~/Downloads/torrents
map g top
map d delete
map x cut
map E extract
map <c-n> push :mkdir<space>
map <c-r> reload
map <enter> shell
map M drag
map <esc> quit

map A :rename; cmd-end # at the very end
map c push A<c-u> # new rename
map I :rename; cmd-home # at the very beginning
map i :rename # before extension
map a :rename; cmd-right # after extension
map B bulkrename

#map Y $printf "%s" "$fx" | xclip -selection clipboard
# vim:set syntax=bash:
